#!/bin/sh

if test -d "$NIX_DEV_ROOT" ; then

cdp() { cd $NIX_DEV_ROOT/nixpkgs; }
cdn() { cd $NIX_DEV_ROOT; }

vimconf() { (cdn && vim nixos-config ; ); }
vimallp() { (cdp && vim pkgs/top-level/all-packages.nix; ); }

_needhelp() {
  echo "$@" | grep -qwE -e '-h|--help'
}

nix-dev-rebuild() {(
  export NIX_PATH="nixpkgs=$NIX_DEV_ROOT/nixpkgs:nixos=$NIX_DEV_ROOT/nixpkgs/nixos:nixos-config=$NIX_DEV_ROOT/nixos-config:services=/etc/nixos/services"
  sudo -H nixos-rebuild -I $NIX_DEV_ROOT "$@"
)}

nix-dev-br() {
  local ME=nix-dev-br
  echo $@ | grep -qwE -e '-h|--help' && {
    echo "$ME <commits> - Cherry pick the commits specified to a new branch derived directly from the master" >&2
    return 1
  }

  local cwd=`pwd`
  if ! cd $NIX_DEV_ROOT/nixpkgs 2>/dev/null ; then
    echo "$ME: $NIX_DEV_ROOT/nixpkgs is not a directory" >&2
    return 1
  fi

  local bname
  echo -n "Enter name for the git branch: "
  read bname

  (
  cb=`git branch --list | grep '*' | awk '{print $2}'`&&
  echo "$ME: Current branch is $cb" &&
  base=`git merge-base local origin/master` &&
  echo "$ME: Base point is $base" &&
  { git branch $bname $base || echo "$ME: branch $bname exists? Well, OK" ; } &&
  git checkout $bname &&
  echo "$ME: Cherry picking $@ to $bname" &&
  git cherry-pick $@ &&
  echo "$ME: Checking out the old current $cb" &&
  git checkout $cb &&
  true
  ) >&2

  if [ "$?" != "0" ] ; then {
    echo "$ME: Cherry-picking failed. Do some git magic to fix it."
    } >&2
    return 1
  fi

  cd $cwd
}

nix-dev-attr-by-name() {(
  ME=nix-dev-attr-by-name
  _needhelp "$@" && {
    echo "$ME: print nixpkgs attribute name of a package" >&2
    exit 1
  }

  IFS=''
  Q=`nix-dev-env -qa \* -P | grep -iw "$1"`
  case `echo $Q | wc -w` in
    0) echo "$ME: No packages found" >&2 ;
       exit 1 ;;
    2) ATTR=`echo $Q | awk '{print $1}'`
       echo "$ATTR";;
    *) printf "$ME: More than one package found:\n" >&2
       echo $Q | awk '{printf ("  %s\n",$2)}' | sort >&2
       exit 1 ;;
  esac
)}

nix-dev-getsrc-by-attr() { (
  set -e
  nix-build --no-out-link $NIX_DEV_ROOT/nixpkgs/pkgs/top-level/all-packages.nix -A $1.src --show-trace
) }

nix-dev-getsrc() {(
  nix-dev-attr-by-name $1 | {
    read ATTR && (
    nix-dev-getsrc-by-attr $ATTR
  )}
)}

nix-dev-unpack() {(
  ME=nix-dev-unpack
  _needhelp "$@" && {
    echo "$ME: Unpack package's tarball (.src attribute) to a subdir" >&2
    echo "Example: $ME man-1.6g" >&2
    exit 1
  }

  which aunpack >/dev/null || {
    echo "$ME: aunpack is required. Please install it with nix-dev-env -i atool" >&2
    exit 1
  }

  NAME=""
  FETCHER=nix-dev-getsrc
  while test -n "$1" ; do
    case $1 in
      -h|--help)
          echo "$ME [-A] NAME - Unpacks package into current directory" >&2
          exit 1 ;;
      -A)
          FETCHER=nix-dev-getsrc-by-attr;;
      *)
          NAME=$1;;
    esac
    shift
  done

  $FETCHER $NAME | { read path && (
    if test -d $path ; then
      cp -r $path ./out
    else
      aunpack $path
    fi
  )}
)}

nix-dev-patch() {(
  if ! test -d "$NIX_DEV_UNPACK" ; then
    echo "Run this command from the nix-dev-penv subshell" >&2
    exit 1;
  fi

  LANG=C
  cd "$NIX_DEV_UNPACK" &&
  diff -ru $NIX_DEV_UNPACK_SRC_ORIG $NIX_DEV_UNPACK_SRC

)}

nix-dev-penv() {(
  ME=nix-dev-penv
  _needhelp "$@" && {
    echo "$ME: Setup package's devenv in a subshell" >&2
    echo "$ME: nix-dev-penv [-A] PKG" >&2
    echo "Example: $ME mc" >&2
    exit 1
  }

  NAME=""
  ATTR=""
  while test -n "$1" ; do
    case $1 in
      -A)
          ATTR=$2
          shift ;;
      *)
          NAME=$1;;
    esac
    shift
  done

  if test -z "$ATTR" ; then
    ATTR=`nix-dev-attr-by-name $NAME`
    if test "$?" != "0" ; then
      exit 2
    fi
  fi

  SRC=`nix-dev-getsrc-by-attr $ATTR`
  if test "$?" != "0" ; then
    exit 3
  fi

  T=`mktemp -d`

  ( set -e
    cd "$T"
    if test -d $SRC ; then cp -r $SRC ./out ; else aunpack $SRC ; fi
    dir=`ls -1 .`
    ( cd $dir && find -name '*[ch]' -or -name '*.cpp' | xargs ctags ; )
    cp -r $dir $dir.orig
    nix-shell $NIX_DEV_ROOT/nixpkgs -A "$ATTR" \
      --command "
        nix-dev-patch() {(
          LANG=C;
          cd $T;
          diff -ru $dir.orig $dir | grep -v Only;
        )};
        cd $dir;
        screen;
        return;"
  )

  echo "Deleting $T" >&2
  rm -rf "$T"
)}

# FIXME: replace --installed with --available, but keep speed
nix-dev-querydrv() {
	local S=`nix-dev-env -qs --installed $1 --out-path | awk '{print $3}'`
	local N=`echo $S | wc -w`
	case $N in
		1) echo $S ;;
		0) echo "Package $1 not found" >&2 ; return 1 ;;
		*) echo "More than one occurence of $1 found, abort" >&2 ; return 1 ;;
	esac
}

nix-dev-follow() {
  { local P
    P=$(readlink `which $1` 2>/dev/null) ||
    P=$(nix-dev-querydrv $1)
  } &&
  cd `echo $P | awk -F '/' '{printf("/%s/%s/%s\n",$2,$3,$4);}'`
}

nix-dev-addldpath() {
  local S
  S=`nix-dev-querydrv $1` ||
  { echo "Querydrv $1 failed" >&2 ; return 1; }
	export LD_LIBRARY_PATH="$S/lib:$LD_LIBRARY_PATH"
	echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH >&2
}

nix-dev-addcsrc() {
  local S
  S=`nix-dev-querydrv $1` ||
  { echo "Querydrv $1 failed" >&2 ; return 1; }
	export C_INCLUDE_PATH="$S/include:$C_INCLUDE_PATH"
	export LIBRARY_PATH="$S/lib:$LIBRARY_PATH"
	echo C_INCLUDE_PATH=$C_INCLUDE_PATH >&2
	echo LIBRARY_PATH=$LIBRARY_PATH >&2
}

nix-dev-addpy() {
  local S
  S=`nix-dev-querydrv $1` ||
  { echo "Querydrv $1 failed" >&2 ; return 1; }
  local P="$S/lib/`ls -1 $S/lib`/site-packages"
  if test -n "$PYTHONPATH" ; then
    export PYTHONPATH="`ls -d1 $P/*egg`:$PYTHONPATH"
  else
    export PYTHONPATH="`ls -d1 $P/*egg`"
  fi
	echo PYTHONPATH=$PYTHONPATH >&2
}

else
  echo "NIX_DEV_ROOT is not set" >&2
fi

